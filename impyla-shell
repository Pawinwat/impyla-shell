#!/usr/bin/env python
import sys
import argparse
from impala.dbapi import connect
import configparser
import os
from prettytable import PrettyTable
import time

def execute_impala_query(query, use_kerberos):
    # Get the absolute path to the script's directory
    script_dir = os.path.dirname(os.path.abspath(__file__))

    # Use the absolute path to the new config file
    config_file = os.path.join(script_dir, 'impyla-config.ini')

    # Read connection details from the config file
    config = configparser.ConfigParser()
    config.read(config_file)

    host = config.get('impala', 'host')
    port = config.getint('impala', 'port')
    database = config.get('impala', 'database')
    username = config.get('impala', 'username')
    password = config.get('impala', 'password')
    realm = config.get('impala', 'realm')

    if use_kerberos:
        # Authenticate with Kerberos
        service = "impala"

        # Establish a connection to Impala using the Kerberos token
        conn = connect(host=host, port=port, database=database, auth_mechanism='GSSAPI', kerberos_service=service)
    else:
        # Establish a connection to Impala using username and password
        conn = connect(host=host, port=port, database=database, user=username, password=password)

    # Create a cursor object to execute queries
    cursor = conn.cursor()

    try:
        start_time = time.time()

        # Execute the provided query
        cursor.execute(query)

        # Fetch the column names
        columns = [desc[0] for desc in cursor.description]

        # Create a PrettyTable with column names
        table = PrettyTable(columns)

        # Fetch and add rows to the table
        rows = cursor.fetchall()
        for row in rows:
            table.add_row(row)

        # Print the table
        print(table)

        end_time = time.time()
        time_used = end_time - start_time
        print(f"\nQuery executed in {time_used:.4f} seconds")

    except Exception as e:
        print("Error executing query:", e)

    finally:
        # Close the cursor and connection
        cursor.close()
        conn.close()

def read_query_from_file(file_path):
    try:
        with open(file_path, 'r') as file:
            return file.read()
    except Exception as e:
        print(f"Error reading query from file: {e}")
        sys.exit(1)

def main():
    parser = argparse.ArgumentParser(description="Execute an Impala query")
    parser.add_argument("-f", "--file", help="File containing Impala query")
    parser.add_argument("--kerberos", help="Use Kerberos for authentication", action="store_true")
    args = parser.parse_args()

    if args.file:
        query = read_query_from_file(args.file)
        print(f"Executing Impala Query from file {args.file}:\n{query}")
        execute_impala_query(query, args.kerberos)
    else:
        print("No query file provided. Use the -f/--file option to specify a file containing the query.")

if __name__ == "__main__":
    main()
